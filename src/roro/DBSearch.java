/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RORO;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author cmeehan
 */
public class DBSearch extends javax.swing.JFrame {

    List<TableCellEditor> editors = new ArrayList<>(3);

    public DBSearch() {
        initComponents();
    }

    /**
     * Creates new form DBSearch
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        parametersTable = new javax.swing.JTable();
        addToSearch = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        moveWhereUp = new javax.swing.JButton();
        moveWhereDown = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        includeInResultsTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        fieldsTable = new javax.swing.JTable();
        addToSearch1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        moveColumnUp = new javax.swing.JButton();
        moveColumnDown = new javax.swing.JButton();
        includePackingList = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        queryNameTextField = new javax.swing.JTextField();
        dateTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        saveAndSubmitSearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DB Search Engine");
        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Where", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        parametersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "And/Or", "(", "Column Name", "Operator", "Value", ")"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableColumn column = parametersTable.getColumnModel().getColumn(1);
        JComboBox isComboBox = new JComboBox();
        isComboBox.addItem(" ");
        isComboBox.addItem("LIKE");
        isComboBox.addItem("=");
        isComboBox.addItem(">");
        isComboBox.addItem("<");
        isComboBox.addItem(">=");
        isComboBox.addItem("<=");
        parametersTable.getTableHeader().setReorderingAllowed(false);
        column = parametersTable.getColumnModel().getColumn(0);
        JComboBox isComboBox1 = new JComboBox();
        isComboBox.addItem(" ");
        isComboBox.addItem("AND");
        isComboBox.addItem("OR");
        isComboBox.addItem("(");
        jScrollPane2.setViewportView(parametersTable);
        column = parametersTable.getColumnModel().getColumn(0);
        JComboBox isComboBox2 = new JComboBox();
        isComboBox.addItem(" ");
        isComboBox.addItem(")");
        if (parametersTable.getColumnModel().getColumnCount() > 0) {
            parametersTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            parametersTable.getColumnModel().getColumn(1).setPreferredWidth(50);
            parametersTable.getColumnModel().getColumn(2).setPreferredWidth(125);
            parametersTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            parametersTable.getColumnModel().getColumn(4).setPreferredWidth(250);
            parametersTable.getColumnModel().getColumn(5).setPreferredWidth(50);
        }

        addToSearch.setText("Add");
        /*try{
            Image image = ImageIO.read(getClass().getResource("chevron-right.png"));
            addToSearch.setIcon(new ImageIcon(image));
        }catch(IOException ex){
            System.out.println(ex.getMessage());
        }*/
        addToSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToSearchActionPerformed(evt);
            }
        });

        jButton4.setText("Remove");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        moveWhereUp.setText("Move Up");
        /*try{
            Image image = ImageIO.read(getClass().getResource("chevron-right.png"));
            addToSearch.setIcon(new ImageIcon(image));
        }catch(IOException ex){
            System.out.println(ex.getMessage());
        }*/
        moveWhereUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveWhereUpActionPerformed(evt);
            }
        });

        moveWhereDown.setText("Move Down");
        moveWhereDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveWhereDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(moveWhereUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveWhereDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addToSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {moveWhereDown, moveWhereUp});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addToSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(moveWhereUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveWhereDown)
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addToSearch, jButton4, moveWhereDown, moveWhereUp});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Result Columns", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        includeInResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Included in Results"
            }
        ));
        includeInResultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(includeInResultsTable);
        if (includeInResultsTable.getColumnModel().getColumnCount() > 0) {
            includeInResultsTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        }

        fieldsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Quote ID"},
                {"Customer Name"},
                {"Quote Contact Name"},
                {"Contact Email"},
                {"Trade Lane"},
                {"POL"},
                {"POD"},
                {"Commodity Class"},
                {"Handling Instructions"},
                {"Accessories"},
                {"Mafi Minimum"},
                {"Commodity Description"},
                {"OFT"},
                {"BAF"},
                {"ECA BAF"},
                {"THC"},
                {"WFG"},
                {"War Risk"},
                {"Documentation Fee"},
                {"Contract Rate"},
                {"Spot Rate"},
                {"Booked"},
                {"Booking Number"},
                {"Declined"},
                {"Comments"},
                {"Date"},
                {"Duplicate"},
                {"Feedback"}
            },
            new String [] {
                "Fields"
            }
        ));
        jScrollPane5.setViewportView(fieldsTable);
        if (fieldsTable.getColumnModel().getColumnCount() > 0) {
            fieldsTable.getColumnModel().getColumn(0).setResizable(false);
            fieldsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        }

        addToSearch1.setText("Add");
        /*try{
            Image image = ImageIO.read(getClass().getResource("chevron-right.png"));
            addToSearch.setIcon(new ImageIcon(image));
        }catch(IOException ex){
            System.out.println(ex.getMessage());
        }*/
        addToSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToSearch1ActionPerformed(evt);
            }
        });

        jButton5.setText("Remove");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        moveColumnUp.setText("Move Up");
        /*try{
            Image image = ImageIO.read(getClass().getResource("chevron-right.png"));
            addToSearch.setIcon(new ImageIcon(image));
        }catch(IOException ex){
            System.out.println(ex.getMessage());
        }*/
        moveColumnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveColumnUpActionPerformed(evt);
            }
        });

        moveColumnDown.setText("Move Down");
        moveColumnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveColumnDownActionPerformed(evt);
            }
        });

        includePackingList.setText("Packing List");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addToSearch1)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moveColumnUp)
                    .addComponent(moveColumnDown)
                    .addComponent(includePackingList))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane4, jScrollPane5});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {moveColumnDown, moveColumnUp});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addToSearch1, jButton5});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addToSearch1)
                        .addGap(6, 6, 6)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(includePackingList)
                        .addGap(16, 16, 16)
                        .addComponent(moveColumnUp)
                        .addGap(6, 6, 6)
                        .addComponent(moveColumnDown)))
                .addContainerGap())
        );

        jButton1.setText("Submit Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Query Name:");

        jLabel3.setText("Date:");

        saveAndSubmitSearchButton.setText("Save and Submit Search");
        saveAndSubmitSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndSubmitSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveAndSubmitSearchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(saveAndSubmitSearchButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       SubmitSearch();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void addToSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToSearchActionPerformed

        //Combo box for handling statements
        DefaultTableModel model = (DefaultTableModel) parametersTable.getModel();

        TableColumn column; // Declare table column value

        column = parametersTable.getColumnModel().getColumn(0);
        JComboBox isComboBox0 = new JComboBox();
        isComboBox0.addItem(" ");
        isComboBox0.addItem("AND");
        isComboBox0.addItem("OR");
        column.setCellEditor(new DefaultCellEditor(isComboBox0));

        column = parametersTable.getColumnModel().getColumn(1);
        JComboBox isComboBox1 = new JComboBox();
        isComboBox1.addItem(" ");
        isComboBox1.addItem("(");
        isComboBox1.addItem("((");
        isComboBox1.addItem("(((");
        isComboBox1.addItem("((((");
        isComboBox1.addItem("(((((");
        column.setCellEditor(new DefaultCellEditor(isComboBox1));

        column = parametersTable.getColumnModel().getColumn(2);
        JComboBox isComboBox2 = new JComboBox();
        isComboBox2.addItem("");
        isComboBox2.addItem("Quote ID");
        isComboBox2.addItem("Quote Date");
        isComboBox2.addItem("Trade Lane");
        isComboBox2.addItem("POL");
        isComboBox2.addItem("POD");
        isComboBox2.addItem("Commodity Class");
        isComboBox2.addItem("Handling Instructions");
        isComboBox2.addItem("Accessories");
        isComboBox2.addItem("Contract Rates");
        isComboBox2.addItem("Spot Rates");
        isComboBox2.addItem("Booked");
        isComboBox2.addItem("Decline");
        isComboBox2.addItem("Customer Name");
        column.setCellEditor(new DefaultCellEditor(isComboBox2));

        column = parametersTable.getColumnModel().getColumn(3);
        JComboBox isComboBox3 = new JComboBox();
        isComboBox3.addItem(" ");
        isComboBox3.addItem("BEGINS WITH");
        isComboBox3.addItem("ENDS WITH");
        isComboBox3.addItem("LIKE");
        isComboBox3.addItem("=");
        isComboBox3.addItem(">");
        isComboBox3.addItem("<");
        isComboBox3.addItem(">=");
        isComboBox3.addItem("<=");
        column.setCellEditor(new DefaultCellEditor(isComboBox3));

        column = parametersTable.getColumnModel().getColumn(5);
        JComboBox isComboBox5 = new JComboBox();
        isComboBox5.addItem(" ");
        isComboBox5.addItem(")");
        isComboBox5.addItem("))");
        isComboBox5.addItem(")))");
        isComboBox5.addItem("))))");
        isComboBox5.addItem(")))))");
        column.setCellEditor(new DefaultCellEditor(isComboBox5));

        model.addRow(new Object[]{"", "", "", "", "", ""});
        
    }//GEN-LAST:event_addToSearchActionPerformed

    private void addToSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToSearch1ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = fieldsTable.getSelectedRow();
        Object selectedItem = fieldsTable.getValueAt(selectedRowIndex, 0);

        //Combo box for handling statements
        DefaultTableModel model = (DefaultTableModel) includeInResultsTable.getModel();

        model.addRow(new Object[]{""});
        int rows = includeInResultsTable.getRowCount();
        switch (rows) {
            case 1:
                includeInResultsTable.setValueAt(selectedItem, 0, 0);
                break;
            case 2:
                includeInResultsTable.setValueAt(selectedItem, 1, 0);
                break;
            case 3:
                includeInResultsTable.setValueAt(selectedItem, 2, 0);
                break;
            case 4:
                includeInResultsTable.setValueAt(selectedItem, 3, 0);
                break;
            case 5:
                includeInResultsTable.setValueAt(selectedItem, 4, 0);
                break;
            case 6:
                includeInResultsTable.setValueAt(selectedItem, 5, 0);
                break;
            case 7:
                includeInResultsTable.setValueAt(selectedItem, 6, 0);
                break;
            case 8:
                includeInResultsTable.setValueAt(selectedItem, 7, 0);
                break;
            case 9:
                includeInResultsTable.setValueAt(selectedItem, 8, 0);
                break;
            case 10:
                includeInResultsTable.setValueAt(selectedItem, 9, 0);
                break;
            case 11:
                includeInResultsTable.setValueAt(selectedItem, 10, 0);
                break;
            case 12:
                includeInResultsTable.setValueAt(selectedItem, 11, 0);
                break;
            case 13:
                includeInResultsTable.setValueAt(selectedItem, 12, 0);
                break;
            case 14:
                includeInResultsTable.setValueAt(selectedItem, 13, 0);
                break;
            case 15:
                includeInResultsTable.setValueAt(selectedItem, 14, 0);
                break;
            case 16:
                includeInResultsTable.setValueAt(selectedItem, 15, 0);
                break;
            case 17:
                includeInResultsTable.setValueAt(selectedItem, 16, 0);
                break;
            case 18:
                includeInResultsTable.setValueAt(selectedItem, 17, 0);
                break;
            case 19:
                includeInResultsTable.setValueAt(selectedItem, 18, 0);
                break;
            case 20:
                includeInResultsTable.setValueAt(selectedItem, 19, 0);
                break;
            case 21:
                includeInResultsTable.setValueAt(selectedItem, 20, 0);
                break;
            case 22:
                includeInResultsTable.setValueAt(selectedItem, 21, 0);
                break;
            case 23:
                includeInResultsTable.setValueAt(selectedItem, 22, 0);
                break;
            case 24:
                includeInResultsTable.setValueAt(selectedItem, 23, 0);
            default:
                break;
        }
    }//GEN-LAST:event_addToSearch1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selectedRowIndex = parametersTable.getSelectedRow();
        ((DefaultTableModel) parametersTable.getModel()).removeRow(selectedRowIndex);


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int selectedRowIndex = includeInResultsTable.getSelectedRow();
        ((DefaultTableModel) includeInResultsTable.getModel()).removeRow(selectedRowIndex);


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void moveColumnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveColumnUpActionPerformed
        //Moves selected row down in the parameters table
        DefaultTableModel model = (DefaultTableModel) includeInResultsTable.getModel();
        int[] rows = includeInResultsTable.getSelectedRows();
        model.moveRow(rows[0], rows[rows.length - 1], rows[0] - 1);
        includeInResultsTable.setRowSelectionInterval(rows[0] - 1, rows[rows.length - 1] - 1);
    }//GEN-LAST:event_moveColumnUpActionPerformed

    private void moveColumnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveColumnDownActionPerformed
        //Moves selected row down in the parameters table
        DefaultTableModel model = (DefaultTableModel) includeInResultsTable.getModel();
        int[] rows = includeInResultsTable.getSelectedRows();
        model.moveRow(rows[0], rows[rows.length - 1], rows[0] + 1);
        includeInResultsTable.setRowSelectionInterval(rows[0] - 1, rows[rows.length - 1] - 1);
    }//GEN-LAST:event_moveColumnDownActionPerformed

    private void moveWhereUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveWhereUpActionPerformed
        //Moves selected line up  in the parameters table
        DefaultTableModel model = (DefaultTableModel) parametersTable.getModel();
        int[] rows = parametersTable.getSelectedRows();
        model.moveRow(rows[0], rows[rows.length - 1], rows[0] - 1);
        parametersTable.setRowSelectionInterval(rows[0] - 1, rows[rows.length - 1] - 1);
    }//GEN-LAST:event_moveWhereUpActionPerformed

    private void moveWhereDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveWhereDownActionPerformed
        //Moves selected row down in the parameters table
        DefaultTableModel model = (DefaultTableModel) parametersTable.getModel();
        int[] rows = parametersTable.getSelectedRows();
        model.moveRow(rows[0], rows[rows.length - 1], rows[0] + 1);
        parametersTable.setRowSelectionInterval(rows[0] - 1, rows[rows.length - 1] - 1);

    }//GEN-LAST:event_moveWhereDownActionPerformed

    private void saveAndSubmitSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndSubmitSearchButtonActionPerformed
        SaveAndSubmitSearch();
    }//GEN-LAST:event_saveAndSubmitSearchButtonActionPerformed

     // Runs the database search
    public void SubmitSearch() {

        //Establish connection to the DB
        Connection conn = new DBConnection().connect();

        Boolean includePL = DBSearch.includePackingList.isSelected();
        String queryName = DBSearch.queryNameTextField.getText();
        MainMenu.queryNameTextField.setText(queryName);
        MainMenu.dateTextField.setText(DBSearch.dateTextField.getText());
        MainMenu.queryTitleLabel.setText(queryName);
        if (queryName.equals("")) {
            JOptionPane.showMessageDialog(null, "You must enter a query name");
        } else {
            //Get the row count of the included fields table
            int resultRows = includeInResultsTable.getRowCount();
            String[] Selections = new String[resultRows]; //Declare the array selections and set it's size equal to the number of rows in the selected fields table
            for (int includeResults = 0; includeResults < resultRows; includeResults++) {
                Object includeField = includeInResultsTable.getValueAt(includeResults, 0);//Get each value at each row in the selected fields table
                String fields = null; //Declare variable fields as a String
                switch (String.valueOf(includeField)) { //Sets the values equal to the proper
                    case "Quote ID":
                        fields = "allquotes.ID";
                        break;
                    case "Customer Name":
                        fields = "customerName AS 'Customer Name'";
                        break;
                    case "Quote Contact Name":
                        fields = "contactName AS 'Quote Contact Name'";
                        break;
                    case "Quote Contact Email":
                        fields = "contactEmail AS 'Quote Contact Email'";
                        break;
                    case "Trade Lane":
                        fields = "tradeLane AS 'Trade Lane'";
                        break;
                    case "POL":
                        fields = "pol AS 'POL'";
                        break;
                    case "POD":
                        fields = "pod AS 'POD'";
                        break;
                    case "Commodity Class":
                        fields = "comm_class AS 'Commodity Class'";
                        break;
                    case "Handling Instructions":
                        fields = "handling_instructions AS 'Handling Insructions'";
                        break;
                    case "Accessories":
                        fields = "IF(accessories=true, 'Yes', '') AS 'Accessories'";
                        break;
                    case "Mafi Minimum":
                        fields = "IF(mafiMinimum=true, CONTACT('$',mafiMinimumCharge), '') AS 'Mafi Minimum'";
                        break;
                    case "Commodity Description":
                        fields = "comm_description AS 'Commodity Description'";
                        break;
                    case "OFT":
                        fields = "IF(rate!='',CONCAT('$',rate), 'N/A') AS 'OFT', rate_unit AS 'OFT Unit'";
                        break;
                    case "BAF":
                        fields = "IF(baf='',IF(bafIncluded=true, 'Included', ''), CONCAT(baf, '%')) AS 'BAF'";
                        break;
                    case "ECA BAF":
                        fields = "IF(ecaIncluded=true, 'Included', IF(eca_baf='', '' ,CONCAT('$',eca_baf))) AS 'ECA BAF', IF(ecaIncluded=true, '', eca_unit) AS 'ECA Unit'";
                        break;
                    case "THC":
                        fields = "IF(thcAttached=true, 'per Tariff', IF(thcIncluded=true,'Included', IF(thc_unit='Subject to Local Charges', 'Subject to Local Charges', IF(thc_unit='FAS', 'FAS', CONCAT('$',thc))))) AS 'THC', IF(thcAttached=true, 'per Tariff', IF(thcIncluded=true,'',IF(thc_unit='Subject to Local Charges', 'Subject to Local Charges', IF(thc_unit='FAS', 'FAS', thc_unit)))) AS 'THC Unit'";
                        break;
                    case "WFG":
                        fields = "IF(wfgIncluded=true, 'Included', IF(wfgAttached=true, 'per Tariff', IF(wfg_unit='Subject to Local Charges', 'Subject to Local Charges', IF(wfg_unit='FAS', 'FAS', CONCAT('$',wfg))))) AS 'WFG', IF(wfgIncluded=true, 'Included', IF(wfgAttached=true, 'per Tariff', IF(wfg_unit='Subject to Local Charges', 'Subject to Local Charges', IF(wfg_unit='FAS', 'FAS', wfg_unit)))) AS 'WFG Unit'";
                        break;
                    case "War Risk":
                        fields = "IF(war_risk=true, 'Subject To Tariff', '') AS 'War Risk'";
                        break;
                    case "Documentation Fee":
                        fields = "IF(documentationFeeIncluded=true, 'Included', doc_fee) AS 'Documentation Fee'";
                        break;
                    case "Contract Rate":
                        fields = "IF(contract_rate=true, 'per Contract', '') AS 'Contract Rate'";
                        break;
                    case "Spot Rate":
                        fields = "IF(spot_rate=true, 'Yes', '') AS 'Spot Rate'";
                        break;
                    case "Booked":
                        fields = "IF(booked=true, 'Yes', '') AS 'Booked'";
                        break;
                    case "Declined":
                        fields = "IF(deny=true, 'Yes', '') AS 'Declined', IF(reason_for_decline='N/A', '', reason_for_decline) AS 'Reason for Decline'";
                        break;
                    case "Comments":
                        fields = "comments AS 'Comments'";
                        break;
                    case "Date":
                        fields = "DATE_FORMAT(DATE_QUOTED, '%Y-%m-%d') AS 'Date Quoted', IF(DATE_UPDATED != '', DATE_FORMAT(DATE_UPDATED, '%Y-%m-%d'), '') AS 'Date Last Updated'";
                        break;
                    case "Booking Number":
                        fields = "bookingNumber AS 'Booking Number'";
                        break;
                    case "Duplicate":
                        fields = "IF(duplicateRate=true, 'Yes', '') AS 'Duplicate'";
                        break;
                    case "Feedback":
                        fields = "feedback AS 'Feedback', feedbackType AS 'Feedback Category', feedbackDescription AS 'Feedback Description'";
                        break;
                    default:
                        break;
                }

                Selections[includeResults] = fields;
            }
            Object resultTable = null;
            if (resultRows - 1 < 0) {
                resultTable = "";
            } else {
                resultTable = includeInResultsTable.getValueAt(resultRows - 1, 0);
            }
            String id = "ID";
            String tradeLane = "tradeLane";
            String pol = "pol";
            String pod = "pod";
            String commClass = "comm_class";
            String handling = "handling_instructions";
            String accessories = "accessories";
            String contract = "contract";
            String booked = "booked";
            String declined = "deny";
            String sql;

            Object andOr;
            Object parenthases1;
            Object columnActual;
            Object column;
            Object operator;
            Object value;
            Object parenthases2;

            int rows = parametersTable.getRowCount();
            String[] whereStatement = new String[rows];
            String selectedFields = null;

            for (int r = 0; r < rows; r++) {
                andOr = parametersTable.getValueAt(r, 0);
                parenthases1 = parametersTable.getValueAt(r, 1);
                columnActual = parametersTable.getValueAt(r, 2);
                column = null;
                operator = parametersTable.getValueAt(r, 3);
                value = parametersTable.getValueAt(r, 4);
                parenthases2 = parametersTable.getValueAt(r, 5);
                switch (String.valueOf(columnActual)) {
                    case "Quote ID":
                        column = "allquotes." + id;
                        break;
                    case "Trade Lane":
                        column = "allquotes." + tradeLane;
                        break;
                    case "POL":
                        column = "allquotes." + pol;
                        break;
                    case "POD":
                        column = "allquotes." + pod;
                        break;
                    case "Commodity Class":
                        column = "allquotes." + commClass;
                        break;
                    case "Handling Instructions":
                        column = "allquotes." + handling;
                        break;
                    case "Accessores":
                        column = "allquotes." + accessories;
                        break;
                    case "Contract Rates":
                        column = "allquotes." + contract;
                        break;
                    case "Booked":
                        column = "allquotes." + booked;
                        break;
                    case "Decline":
                        column = "allquotes." + declined;
                        break;
                    case "Quote Date":
                        column = "IF(allquotes.DATE_UPDATED!='',allquotes.DATE_UPDATED, allquotes.DATE_QUOTED)";
                        break;
                    case "Duplicate":
                        column = "allquotes.duplicateRate";
                        break;
                    case "Customer Name":
                        column = "allquotes.customerName";
                        break;
                    default:
                        break;
                }
                if (andOr.equals("null")) {
                    andOr = "";
                }
                if (operator == null) {
                    operator = " ";
                }
                if (value == null) {
                    value = "";
                }
                if (parenthases2 == null) {
                    parenthases2 = "";
                }
                String likeFields;

                if (operator.equals("ENDS WITH")) {
                    StringBuilder o = new StringBuilder();
                    o.append("LIKE");
                    StringBuilder v = new StringBuilder();
                    v.append("%");
                    v.append(value);
                    whereStatement[r] = " " + andOr + " " + parenthases1 + column + " " + o + " '" + v + "'" + parenthases2;
                } else if (operator.equals("LIKE")) {
                    StringBuilder o = new StringBuilder();
                    o.append("LIKE ");
                    String str = String.valueOf(value);
                    String[] a = str.split("");
                    List<String> selectFields = Arrays.asList(a);
                    likeFields = selectFields.stream().map(i -> (i)).collect(Collectors.joining("%"));
                    whereStatement[r] = " " + andOr + " " + parenthases1 + column + " " + o + " '%" + likeFields + "%'" + parenthases2;
                } else if (operator.equals("BEGINS WITH")) {
                    StringBuilder o = new StringBuilder();
                    o.append("LIKE");
                    StringBuilder v = new StringBuilder();
                    v.append(value);
                    v.append("%");
                    whereStatement[r] = " " + andOr + " " + parenthases1 + column + " " + o + " '" + v + "'" + parenthases2;
                } else {
                    whereStatement[r] = " " + andOr + " " + parenthases1 + column + " " + operator + " '" + value + "'" + parenthases2;
                }

                if (whereStatement[r] == null || whereStatement[r].equals("null")) {
                    whereStatement[r] = "";
                }

                System.out.println(r);
            }
            if (rows >= 0) {
                if (Selections.length < 1) {
                    int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to return all fields?");
                    if (response == JOptionPane.YES_OPTION) {
                        selectedFields = "ID AS 'Quote ID', alpha_numeral AS 'Alpha Character', customerName AS 'Company Name', contactName AS 'Contact Name', contactEmail AS 'Contact Email',  tradeLane AS 'Trade Lane', pol AS 'POL', pod AS 'POD', tshp1 AS 'First Transship Port', tshp2 AS 'Second Transship Port', comm_class AS 'Commodity Class', handling_instructions AS 'Handling Instructions', IF(accessories != 1, '', 'Accessories') AS 'Accessories', comm_description AS 'Commodity Description', rate AS 'Ocean Freight', rate_unit AS 'Ocean Freight Unit', IF (bafIncluded != 1, baf+'%', 'Included') AS 'BAF', eca_baf AS 'ECA BAF', eca_unit AS 'ECA BAF Unit',  IF(thc_unit !='N/A', IF(thcIncluded != true, IF(thcAttached != true, IF(thc_unit != 'Subject to local charges', IF(thc_unit != 'FAS', CONCAT(thc + ' ' + thc_unit), 'FAS'),'Subject to Local Charges'), 'per Tariff'), 'Included'), 'N/A') AS 'Terminal Handling Charges' ,  IF(wfg_unit !='N/A', IF(wfgIncluded != true, IF(wfgAttached != true, IF(wfg_unit != 'Subject to local charges', IF(wfg_unit != 'FAS', CONCAT(wfg + ' ' + wfg_unit), 'FAS'),'Subject to Local Charges'), 'per Tariff'), 'Included'), 'N/A') AS 'Wharfage Charges', IF(documentationfeeIncluded != true, doc_fee, 'Included') AS 'Documentation Fee',  IF(war_risk != true, 'N/A', 'Subject to War Risk') AS 'War Risk', IF(mafiMinimum != true, '', mafiMinimumCharge+' per MAFI Unit') AS 'MAFI Minimum', IF(spot_rate != true, 'N/A', 'True') AS 'Spot Rate', if(contract_rate != 1,'', 'True') AS 'Contract Rate', IF(booked !=1, '', 'True') AS 'Booked', IF(booked!=1, '', bookingNumber) AS 'Booking Number', IF(booked != 1, '', bookedUserID) AS 'Booked User ID', user_ID AS 'Author ID', updateUserID AS 'Updater ID', date AS 'Date Quoted', dateUpdated AS 'Date Updated', comments AS 'Internal Comments', carrier_comments AS 'Carrier Comments', IF(deny != 1, ' ', 'Declined') AS 'Decline', IF(deny != 1, ' ', reason_for_decline) AS 'Reason for Decline', IF(feedback!= true, '', 'True') AS 'Feedback', IF(feedback != true, '', feedbackType) AS 'Feedback Category', IF(feedback != true, '', feedbackDescription) AS 'Feedback Comments',  IF(duplicateRate!= true, '', 'True') AS 'Dubplicate Rate'";
                    }

                } else {
                    List<String> selectFields = Arrays.asList(Selections);
                    selectedFields = selectFields.stream().map(i -> (i)).collect(Collectors.joining(", "));
                }

                StringBuilder where = new StringBuilder();
                for (String w : whereStatement) {
                    where.append(w);
                }
                if (includePL == true) {
                    sql = "SELECT " + selectedFields + ", commodity AS 'Commodity', quantity AS 'Quantity', l AS 'Length(cm)', w AS 'Width(cm)', h AS 'Height(cm)', kgs AS 'Kilograms', length_inches AS 'Length(in)', width_inches AS 'Width(in)', height_inches AS 'Height(in)', lbs AS 'Pounds', cbm AS '(M3)', IF(l!='null' AND l!='', ((l*w)/10000/6.39),((length_inches*width_inches)*6.4516/10000/6.39)) AS 'RT', cbm*quantity AS 'Total M3' FROM allquotes, packingList WHERE allquotes.ID = packingList.quoteID AND " + where + " AND (packinglist.commodity != '' AND packinglist.commodity != 'null');";
                } else {
                    sql = "SELECT " + selectedFields + " FROM allquotes WHERE " + where + ";";
                }

                try {
                    PreparedStatement ps = conn.prepareStatement(sql);
                    ResultSet rs = ps.executeQuery();

                    // Save search on submit
                    MainMenu.searchResultsTable.setModel(DbUtils.resultSetToTableModel(rs));
                    //this.dispose();
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                this.dispose();
            }
        }
    }

    // This will allow the user to save their search
    public void SaveAndSubmitSearch() {
        // Declare variables
        String searchName, username, date, saveSearchAs, and_or, open_parenthases, column_name, operator, value, close_parenthases, include_in_results;
        Boolean packingList;
        int parametersTableRowCount = DBSearch.parametersTable.getRowCount();
        int rtRowCount = DBSearch.includeInResultsTable.getRowCount();

        // Initialize the variables
        searchName = DBSearch.queryNameTextField.getText();
        username = MainMenu.usernameLabel.getText();
        date = DBSearch.dateTextField.getText();
        packingList = DBSearch.includePackingList.isSelected();

        if (searchName.equals("")) {
            JOptionPane.showMessageDialog(null, "You must add a name");
            DBSearch.queryNameTextField.setBackground(Color.yellow);
        } else {

            saveSearchAs = JOptionPane.showInputDialog(null, "Save the Search As:", username + "_" + searchName + "_" + date);

            // Connect to the Database
            Connection conn = new DBConnection().connect();

            // SQL to insert search information into the database
            String SaveSearchSql = "INSERT INTO saved_searches_name (query_name, date, user, packingList) VALUES(?,?,?,?)";

            // SQL to insert parameters into database for saved search
            String SaveParametersSql = "INSERT INTO saved_search_parameters (and_or, open_parenthases, column_name, operator, value, close_parenthases,search_ID) VALUES(?,?,?,?,?,?,?)";

            // SQL to insert returned values into database for saved search
            String IncludeResultsSql = "INSERT INTO saved_search_results (include_in_results, search_ID) VALUES(?,?)";

            try {
                //Save the search name
                PreparedStatement psSaveSearchSQL = conn.prepareStatement(SaveSearchSql, Statement.RETURN_GENERATED_KEYS);
                psSaveSearchSQL.setString(1, saveSearchAs);
                psSaveSearchSQL.setString(2, date);
                psSaveSearchSQL.setString(3, username);
                psSaveSearchSQL.setBoolean(4, packingList);
                psSaveSearchSQL.executeUpdate();

                ResultSet search_ID = psSaveSearchSQL.getGeneratedKeys();
                int lastKey = 1;
                while (search_ID.next()) {
                    lastKey = search_ID.getInt(1);
                }

                for (int ptRow = 0; ptRow < parametersTableRowCount; ptRow++) {
                    and_or = (String) DBSearch.parametersTable.getValueAt(ptRow, 0);
                    open_parenthases = (String) DBSearch.parametersTable.getValueAt(ptRow, 1);
                    column_name = (String) DBSearch.parametersTable.getValueAt(ptRow, 2);
                    operator = (String) DBSearch.parametersTable.getValueAt(ptRow, 3);
                    value = (String) DBSearch.parametersTable.getValueAt(ptRow, 4);
                    close_parenthases = (String) DBSearch.parametersTable.getValueAt(ptRow, 5);

                    // Save the parameters
                    try {
                        PreparedStatement psSaveParametersSql = conn.prepareStatement(SaveParametersSql);
                        psSaveParametersSql.setString(1, and_or);
                        psSaveParametersSql.setString(2, open_parenthases);
                        psSaveParametersSql.setString(3, column_name);
                        psSaveParametersSql.setString(4, operator);
                        psSaveParametersSql.setString(5, value);
                        psSaveParametersSql.setString(6, close_parenthases);
                        psSaveParametersSql.setInt(7, lastKey);
                        psSaveParametersSql.executeUpdate();
                        psSaveParametersSql.closeOnCompletion();
                    } catch (Exception ex) {
                        System.out.println("Error (psSaveParametersSql): " + ex.getMessage());
                    }
                }

                for (int resultsRow = 0; resultsRow < rtRowCount; resultsRow++) {
                    include_in_results = (String) DBSearch.includeInResultsTable.getValueAt(resultsRow, 0);
                    try {
                        PreparedStatement psIncludeResultsSql = conn.prepareStatement(IncludeResultsSql);
                        psIncludeResultsSql.setString(1, include_in_results);
                        psIncludeResultsSql.setInt(2, lastKey);
                        psIncludeResultsSql.executeUpdate();
                        psIncludeResultsSql.closeOnCompletion();
                    } catch (Exception ex) {
                        System.out.println("Error (psIncludeResultsSql: " + ex.getMessage());
                    }
                }
                psSaveSearchSQL.closeOnCompletion();
                conn.close();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }

            SubmitSearch();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DBSearch().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToSearch;
    private javax.swing.JButton addToSearch1;
    public static javax.swing.JTextField dateTextField;
    public static javax.swing.JTable fieldsTable;
    public static javax.swing.JTable includeInResultsTable;
    public static javax.swing.JCheckBox includePackingList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton moveColumnDown;
    private javax.swing.JButton moveColumnUp;
    private javax.swing.JButton moveWhereDown;
    private javax.swing.JButton moveWhereUp;
    public static javax.swing.JTable parametersTable;
    public static javax.swing.JTextField queryNameTextField;
    private javax.swing.JButton saveAndSubmitSearchButton;
    // End of variables declaration//GEN-END:variables
}
