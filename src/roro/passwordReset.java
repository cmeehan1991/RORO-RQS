package RORO;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author cmeehan
 */
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.table.TableColumnModel;
import net.proteanit.sql.DbUtils;

public class passwordReset extends javax.swing.JDialog {

    public passwordReset() {
        initComponents();
        setIcon();

    }

    /**
     * Creates new form forgotUsernamePassword
     *
     * @param parent
     * @param modal
     */
    public passwordReset(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        setLocationRelativeTo(this);
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        submitUsernameorEmail = new javax.swing.JButton();
        securityQuestionLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        newPasswordPasswordField = new javax.swing.JPasswordField();
        newPasswordConfirmPasswordField = new javax.swing.JPasswordField();
        usernameLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Log-In \"K\" Line RORO Quoting");
        setIconImage(null);
        setIconImages(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Password Reset");

        usernameLabel.setText("Username:");

        jLabel3.setText("New Password:");

        submitUsernameorEmail.setText("Submit");
        submitUsernameorEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitUsernameorEmailActionPerformed(evt);
            }
        });

        securityQuestionLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel4.setText("Confirm password:");

        usernameLabel1.setText("Username:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(submitUsernameorEmail)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newPasswordConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPasswordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(securityQuestionLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {newPasswordConfirmPasswordField, newPasswordPasswordField});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(securityQuestionLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLabel)
                            .addComponent(usernameLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(newPasswordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(newPasswordConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitUsernameorEmail)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitUsernameorEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitUsernameorEmailActionPerformed
        //Reset password

        String newPassword = newPasswordPasswordField.getText();
        String newPasswordConfirm = newPasswordConfirmPasswordField.getText();
        String username = usernameLabel.getText();

        if (newPassword.equals(newPasswordConfirm)) {
            Connection conn = new DBConnection().connect();

            String SQL = "UPDATE authorized_users SET password='" + newPassword + "' WHERE username='" + username + "';";
            try {
                PreparedStatement psSQL = conn.prepareStatement(SQL);

                int rsSQL = psSQL.executeUpdate(SQL);

                
                //Initialize User ID variable and set to null
        String id = null;
                
                //Sql for selecteing the userID based on the username of person logging into application
                String sqlID = "SELECT userID FROM authorized_users WHERE username='" + username + "';";
                try {
                    PreparedStatement psID = conn.prepareStatement(sqlID);
                    ResultSet rsID = psID.executeQuery();
                    if (rsID.next()) {
                        id = rsID.getString("userID");
                    }
                } catch (Exception e) {
                    System.out.println("Error with capturing ID");
                    System.out.println(e.getMessage());
                }

                //String today = new SimpleDateFormat("MM/dd/yyyy HH:mm").format(Calendar.getInstance().getTime());
                Calendar calReturn = Calendar.getInstance();
                calReturn.add(Calendar.DATE, -14);
                String attentionDate = new SimpleDateFormat("MM/dd/YYYY").format(calReturn.getTime());

        //String attentionDate = 
                String sqlLogIn = "SELECT * FROM authorized_users WHERE username='" + username + "' and password='" + newPassword + "';";
                //Get number of quotes;
                String sqlTotalQuotesToDate = "SELECT COUNT(ID) AS TOTAL FROM allquotes WHERE user_ID='" + id + "';";
                //Get out-standing quotes:
                String sqlOutstanding = "SELECT COUNT(ID) AS OUTSTANDING FROM allquotes WHERE user_ID='" + id + "' AND (booked='0' AND deny='0');";
                //Get bookings to date
                String sqlBookings = "SELECT COUNT(ID) AS BOOKINGS FROM allquotes WHERE user_ID='" + id + "' AND booked='1';";

                String sqlOutstandingTable = "SELECT ID, date, customerName, comm_description FROM allquotes WHERE user_ID ='" + id + "' AND (booked='0' AND DENY='0');";

                String sqlRequiringAttention = "SELECT ID, date, customerName, comm_description FROM allquotes WHERE user_ID ='" + id + "' AND (booked='0' AND DENY='0') AND date <= '" + attentionDate + "%';";

                try {
                    //Log in SQL handling
                    PreparedStatement ps = conn.prepareStatement(sqlLogIn);
                    ResultSet rs = ps.executeQuery(sqlLogIn);
                    if (rs.next()) {
                        this.dispose();
                        MainMenu mm = new MainMenu();
                //Get user informatino from database
                        //String id = rs.getString("userID");
                        String firstName = rs.getString("firstName");
                        String lastName = rs.getString("lastName");
                        String title = rs.getString("title");
                        String region = rs.getString("region");
                        String officePhone = rs.getString("phone");
                        String mobilePhone = rs.getString("mobilePhone");
                        String officeLocation = rs.getString("officeLocation");
                        String email = rs.getString("email");
                //System.out.println(count);
                        //Assign information to labels on userInformation Panel
                        MainMenu.userInformationLabel.setText(firstName + " " + lastName);
                        MainMenu.userIDLabel.setText(id);
                        MainMenu.titleLabel.setText(title);
                        MainMenu.salesRegionLabel.setText(region);
                        MainMenu.officePhoneLabel.setText(officePhone);
                        MainMenu.mobilePhoneLabel.setText(mobilePhone);
                        MainMenu.officeLocationLabel.setText(officeLocation);
                        MainMenu.emailLabel.setText(email);

                        /*
                         if(user.equals("jluse")){
                         JOptionPane.showMessageDialog(null,"Your request has been disregarded. Please resend with proper subject line");
                         exit(0);
                         }
                
                         if(user.equals("grogers")){
                         JOptionPane.showMessageDialog(null, "Welcome to the K Line vegan club where eating meat is forbidden!");
                         }
                         */
                        //Total quote sql handling
                        PreparedStatement ps1 = conn.prepareStatement(sqlTotalQuotesToDate);
                        ResultSet rs1 = ps1.executeQuery(sqlTotalQuotesToDate);
                        if (rs1.next()) {
                            int count = rs1.getInt("TOTAL");
                            String totalCount = String.valueOf(count);
                            //System.out.println(count);
                            MainMenu.totalQuotesLabel.setText(totalCount);

                        }

                        //Outstanding quote SQL handling
                        PreparedStatement ps2 = conn.prepareStatement(sqlOutstanding);
                        ResultSet rs2 = ps2.executeQuery(sqlOutstanding);
                        if (rs2.next()) {
                            int outstandingCount = rs2.getInt("OUTSTANDING");
                            String totalOutstanding = String.valueOf(outstandingCount);
                            //System.out.println(totalOutstanding);
                            MainMenu.outstandingLabel.setText(totalOutstanding);
                        }

                        //Get bookings to date
                        PreparedStatement ps3 = conn.prepareStatement(sqlBookings);
                        ResultSet rs3 = ps3.executeQuery(sqlBookings);
                        if (rs3.next()) {
                            int totalBookingsCount = rs3.getInt("BOOKINGS");
                            String totalBookings = String.valueOf(totalBookingsCount);
                            System.out.println(totalBookings);
                            MainMenu.bookedToDateLabel.setText(totalBookings);
                        }
                        PreparedStatement ps4 = conn.prepareStatement(sqlOutstandingTable);
                        ResultSet rs4 = ps4.executeQuery(sqlOutstandingTable);

                        MainMenu.outstandingQuotesTable.setModel(DbUtils.resultSetToTableModel(rs4));
                        TableColumnModel tcm = MainMenu.outstandingQuotesTable.getColumnModel();
                        tcm.getColumn(0).setHeaderValue("Quote ID");
                        tcm.getColumn(1).setHeaderValue("Date Quoted");
                        tcm.getColumn(2).setHeaderValue("Customer Name");
                        tcm.getColumn(3).setHeaderValue("Commodity Description");
                        System.out.println(rs);

                        PreparedStatement ps5 = conn.prepareStatement(sqlRequiringAttention);
                        ResultSet rs5 = ps5.executeQuery(sqlRequiringAttention);
                        int columns1 = rs5.getMetaData().getColumnCount();

                        MainMenu.requireAttentionTable.setModel(DbUtils.resultSetToTableModel(rs5));
                        TableColumnModel tcm1 = MainMenu.requireAttentionTable.getColumnModel();
                        tcm1.getColumn(0).setHeaderValue("Quote ID");
                        tcm1.getColumn(1).setHeaderValue("Date Quoted");
                        tcm1.getColumn(2).setHeaderValue("Customer Name");
                        tcm1.getColumn(3).setHeaderValue("Commodity Description");

                        int totalBookingsCount = rs3.getInt("BOOKINGS");
                        int count = rs1.getInt("TOTAL");

                        if (totalBookingsCount == 0) {
                            MainMenu.bookingRatioLabel.setText("N/A");
                        } else {
                            String ratio = String.valueOf(count / totalBookingsCount);
                            MainMenu.bookingRatioLabel.setText(ratio + ":1");
                        }
                        MainMenu.usernameLabel.setText(username);
                        mm.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "Username & Password Invalid");
                    }
                } catch (SQLException | HeadlessException e) {
                    System.out.println("Error!");
                    System.out.println(e.getMessage());
                    System.out.println(e.getCause());
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Your passwords to not match, please try again");
            newPasswordPasswordField.setText("");
            newPasswordConfirmPasswordField.setText("");
        }


    }//GEN-LAST:event_submitUsernameorEmailActionPerformed

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.jpg")));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(passwordReset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {

            passwordReset dialog = new passwordReset(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField newPasswordConfirmPasswordField;
    private javax.swing.JPasswordField newPasswordPasswordField;
    public static javax.swing.JLabel securityQuestionLabel;
    private javax.swing.JButton submitUsernameorEmail;
    public static javax.swing.JLabel usernameLabel;
    public static javax.swing.JLabel usernameLabel1;
    // End of variables declaration//GEN-END:variables

}
