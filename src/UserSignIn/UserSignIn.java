package UserSignIn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author cmeehan
 */
import Connections.DBConnection;
import Administrator.AdministratorMenu;
import CustomerService.CustomerService;
import Sales.MainMenu;
import Sales.UserInformationActivity;
import Sales.forgotUsernamePassword;
import static UserSignIn.UserSignIn.submitButton;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import static java.lang.System.exit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Calendar;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

public class UserSignIn extends javax.swing.JDialog {

    private final Calendar calReturn = Calendar.getInstance();
    private final Connection conn = new DBConnection().connect();
    private final File sDriveExists = new File("S:\\KAM RORO SALES");
    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
    Window frame;

    public UserSignIn() {
        initComponents();
    }

    /**
     * Creates new form forgotUsernamePassword
     *
     * @param parent
     * @param modal
     */
    public UserSignIn(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Set the location of the window to cent of the screen
        setLocationRelativeTo(null);
    }

    public String user() {
        String user = usernameTextField.getText();
        return user;
    }

    public String password() {
        String pass = String.valueOf(passwordField.getPassword());
        return pass;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        username = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        submitButton = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Log-In \"K\" Line RORO Quoting");
        setForeground(new java.awt.Color(193, 80, 208));
        setIconImage(null);
        setIconImages(null);
        setResizable(false);

        username.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        username.setText("Username:");

        password.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        password.setText("Password:");

        usernameTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });
        usernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameTextFieldKeyPressed(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        submitButton.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        submitButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                submitButtonKeyPressed(evt);
            }
        });

        Exit.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("\"K\" Line RORO Sales");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Forgot Username/Password");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(password)
                            .addComponent(username))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Exit, submitButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {password, username});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(Exit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        userSignInActivity();
    }//GEN-LAST:event_submitButtonActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        forgotUsernamePassword fup = new forgotUsernamePassword();
        this.setVisible(false);

        fup.setVisible(true);

    }//GEN-LAST:event_jLabel2MouseClicked

    private void submitButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_submitButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            userSignInActivity();
        }
    }//GEN-LAST:event_submitButtonKeyPressed

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            userSignInActivity();
        }
    }//GEN-LAST:event_passwordFieldKeyPressed

    private void usernameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextFieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            userSignInActivity();
        }
    }//GEN-LAST:event_usernameTextFieldKeyPressed

    /**
     * ************************************************************
     * This section is for customized box colors on the home screen.*
     * ************************************************************
     */
    private void purpleBoxes() {
        float[] hsb = Color.RGBtoHSB(193, 80, 208, null);
        float hue = hsb[0];
        float saturation = hsb[1];
        float brightness = hsb[2];
        MainMenu.jPanel1.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
        MainMenu.jPanel2.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
        MainMenu.jLabel126.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
        MainMenu.jLabel127.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
    }

    private void greenBoxes() {
        float[] hsb = Color.RGBtoHSB(0, 204, 0, null);
        float hue = hsb[0];
        float saturation = hsb[1];
        float brightness = hsb[2];
        MainMenu.jPanel1.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
        MainMenu.jPanel2.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
        MainMenu.jLabel126.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
        MainMenu.jLabel127.setBorder(BorderFactory.createLineBorder(Color.getHSBColor(hue, saturation, brightness)));
    }

    /**
     * ************************************************************
     ***************************************************************
     *************************************************************
     */
    private String userID(String user, String pass) {
        String ID = null;
        String SQL = "SELECT userID FROM authorized_users WHERE username=? AND password=?";

        try {
            PreparedStatement ps = conn.prepareStatement(SQL);
            ps.setString(1, user);
            ps.setString(2, pass);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                ID = rs.getString("userID");
            }
            return ID;
        } catch (Exception ex) {
            return ex.getMessage();
        }
    }

    private boolean validateUserInformation(String user, String pass, String username, String password) {
        boolean credentials = false;

        if (user.equals(username) & pass.equals(password)) {
            credentials = true;
        }
        return credentials;
    }

    private void goToMain(ResultSet rs, String user, String ID) throws SQLException {
        //SQL to retrieve all current users from DB;
        String sqlUsers = "SELECT userID, CONCAT(firstName,' ', lastName) AS Name FROM authorized_users WHERE department='Sales';";
        String firstName = rs.getString("firstName");
        String lastName = rs.getString("lastName");
        String title = rs.getString("title");
        String region = rs.getString("region");
        String officePhone = rs.getString("phone");
        String mobilePhone = rs.getString("mobilePhone");
        String officeLocation = rs.getString("officeLocation");
        String email = rs.getString("email");
        String department = rs.getString("department");
        String rights = rs.getString("rights");
        if ((rights.equals("General") || rights.equals("Limited")) && department.equals("Customer Service")) {
            CustomerService cs = new CustomerService();
            cs.setVisible(true);
        } else if (rights.equals("Administrative")) {
            AdministratorMenu am = new AdministratorMenu();
            am.setVisible(true);
            try {
                PreparedStatement psUsers = conn.prepareStatement(sqlUsers);
                ResultSet rsUsers = psUsers.executeQuery(sqlUsers);

                AdministratorMenu.adminUserComboBox.addItem("-");
                while (rsUsers.next()) {
                    String[] users = {rsUsers.getString("Name")};
                    String[] amId = {rsUsers.getString("userID")};
                    for (String u : users) {
                        AdministratorMenu.adminUserComboBox.addItem(Arrays.toString(amId) + " - " + u);
                    }
                }

            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } else if (((rights.equals("General") || rights.equals("Limited")) && (department.equals("Sales") || department.equals("Trade Management")))) {

            MainMenu mm = new MainMenu();
            mm.MainMenuInformation(user, ID);
            mm.setVisible(true);

            //Assign information to labels on userInformation Panel
            MainMenu.usernameLabel.setText(user);
            MainMenu.userIDLabel.setText(ID);
            MainMenu.titleLabel.setText(title);
            MainMenu.salesRegionLabel.setText(region);
            MainMenu.officePhoneLabel.setText(officePhone);
            MainMenu.mobilePhoneLabel.setText(mobilePhone);
            MainMenu.officeLocationLabel.setText(officeLocation);
            MainMenu.emailLabel.setText(email);
            new UserInformationActivity().UserInformation(ID, user);

            switch (ID) {
                case "4":
                    purpleBoxes();
                    break;
                case "23":
                    greenBoxes();
                    break;
                default:
                    break;
            }
        } else if (rights.equals("None")) {
            JOptionPane.showMessageDialog(null, "You do not have access to this software. Please contact your supervisor or \nthe system administrator to gain access.");
            exit(0);
        }

        this.dispose();
    }

    private void userSignInActivity() {
        /**
         * *************************************************************************************
         * Check for a valid connection to the S: drive. If it exists then the                 
         * user can sign in.
         * If the S: drive does not exist the user cannot                   
         * sign in and is notified. 
         * The S: drive is necessary to the operation of this application.  
         * ************************************************************************************/
        if (sDriveExists.exists()) {

            String pass = password(), user = user();
            String SQL = "SELECT * FROM authorized_users WHERE username=? and password=?";
            try {
                PreparedStatement ps = conn.prepareStatement(SQL);
                ps.setString(1, user());
                ps.setString(2, password());
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    String getUsername = rs.getString("username");
                    String getPassword = rs.getString("password");
                    String userAuthorization = rs.getString("rights");
                    String ID = rs.getString("userID");

                    if (userAuthorization.equals("NONE")) {
                        JOptionPane.showMessageDialog(this, "ACCESS DENIED: You do not have access to the RORO Quotation System.", "ACCESS DENIED", JOptionPane.WARNING_MESSAGE);
                        usernameTextField.setText("");
                        passwordField.setText("");
                        usernameTextField.setBorder(new LineBorder(Color.RED, 1));
                        passwordField.setBorder(new LineBorder(Color.RED, 1));
                    } else if (!validateUserInformation(user, pass, getUsername, getPassword)) {
                        JOptionPane.showMessageDialog(this, "User credentials are incorrect. Please try again.\n\nHint: make sure that CAPS Lock is turned off.", "Invalid Log In", JOptionPane.WARNING_MESSAGE);
                        passwordField.setText("");
                        usernameTextField.setBorder(new LineBorder(Color.RED, 1));
                        passwordField.setBorder(new LineBorder(Color.RED, 1));
                    } else {
                        goToMain(rs, user, ID);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "The username and password combination are note valid. Please try again.", "Log in Error", JOptionPane.WARNING_MESSAGE);
                    passwordField.setText("");
                    usernameTextField.setBorder(new LineBorder(Color.RED, 1));
                    passwordField.setBorder(new LineBorder(Color.RED, 1));
                }
            } catch (SQLException | HeadlessException ex) {
                JOptionPane.showMessageDialog(this, "Error Signing in: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please connect to the S: drive and try again.", "Connection Error!", JOptionPane.ERROR_MESSAGE);
            passwordField.setText("");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserSignIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {

            UserSignIn dialog = new UserSignIn(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel password;
    public static javax.swing.JPasswordField passwordField;
    public static javax.swing.JButton submitButton;
    private javax.swing.JLabel username;
    public static javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

}
