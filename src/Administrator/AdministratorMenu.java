/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Administrator;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import static java.util.Calendar.YEAR;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import net.proteanit.sql.DbUtils;
import Connections.DBConnection;
import Sales.MainMenu;

/**
 *
 * @author cmeehan
 */
public class AdministratorMenu extends javax.swing.JFrame {

    /**
     * Creates new form AdministratorMenu
     */
    public AdministratorMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        MainMenuButton = new javax.swing.JButton();
        UserAccessButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        MainMenuPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        adminUserComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        totalQuotesLabel = new javax.swing.JLabel();
        totalQuotesCYTDLabel = new javax.swing.JLabel();
        totalQuotesThisWeekLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        outstandingQuotesLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalBookingsLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        outstandingQuotesTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        requireAttentionTable = new javax.swing.JTable();
        viewOutstandingQuoteButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        UserAccessPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        CurrentUsersTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        MainMenuButton.setText("Main Menu");
        MainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuButtonActionPerformed(evt);
            }
        });

        UserAccessButton.setText("User Access");
        UserAccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserAccessButtonActionPerformed(evt);
            }
        });

        jPanel3.setLayout(new java.awt.CardLayout());

        adminUserComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminUserComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("User:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Total Quotes (All-Time):");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Total Quotes CYTD:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Total Quotes (Week):");

        totalQuotesLabel.setText("0");

        totalQuotesCYTDLabel.setText("0");

        totalQuotesThisWeekLabel.setText("0");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Outstanding Quotes:");

        outstandingQuotesLabel.setText("0");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setText("Total Bookings:");

        totalBookingsLabel.setText("0");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MainMenu");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adminUserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalQuotesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalQuotesCYTDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalQuotesThisWeekLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outstandingQuotesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalBookingsLabel)))
                .addGap(193, 193, 193))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adminUserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(totalQuotesLabel)
                    .addComponent(jLabel6)
                    .addComponent(totalQuotesCYTDLabel)
                    .addComponent(jLabel7)
                    .addComponent(totalQuotesThisWeekLabel)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(totalBookingsLabel)
                    .addComponent(outstandingQuotesLabel))
                .addContainerGap())
        );

        outstandingQuotesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Quote ID", "Date Created/Modified", "Customer Name", "Commodity Description"
            }
        ));
        jScrollPane3.setViewportView(outstandingQuotesTable);

        requireAttentionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Quote ID", "Date Created/Modified", "Customer Name", "Commodity Description"
            }
        ));
        jScrollPane4.setViewportView(requireAttentionTable);

        viewOutstandingQuoteButton.setText("View");
        viewOutstandingQuoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOutstandingQuoteButtonActionPerformed(evt);
            }
        });

        jButton4.setText("View");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainMenuPanelLayout = new javax.swing.GroupLayout(MainMenuPanel);
        MainMenuPanel.setLayout(MainMenuPanelLayout);
        MainMenuPanelLayout.setHorizontalGroup(
            MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MainMenuPanelLayout.createSequentialGroup()
                        .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(MainMenuPanelLayout.createSequentialGroup()
                        .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewOutstandingQuoteButton)
                            .addComponent(jButton4))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        MainMenuPanelLayout.setVerticalGroup(
            MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewOutstandingQuoteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );

        MainMenuPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane3, jScrollPane4});

        jPanel3.add(MainMenuPanel, "card2");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("User Access");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton2.setText("New User");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        CurrentUsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Last Name", "First Name", "Username", "Password", "Department", "Rights", "Email", "Title"
            }
        ));
        jScrollPane2.setViewportView(CurrentUsersTable);

        jButton3.setText("Select Current User");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserAccessPanelLayout = new javax.swing.GroupLayout(UserAccessPanel);
        UserAccessPanel.setLayout(UserAccessPanelLayout);
        UserAccessPanelLayout.setHorizontalGroup(
            UserAccessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserAccessPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserAccessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, UserAccessPanelLayout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1057, Short.MAX_VALUE))
                .addContainerGap())
        );
        UserAccessPanelLayout.setVerticalGroup(
            UserAccessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserAccessPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UserAccessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jPanel3.add(UserAccessPanel, "card4");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(MainMenuButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserAccessButton)
                .addContainerGap(967, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MainMenuButton)
                    .addComponent(UserAccessButton))
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jScrollPane1.setViewportView(jPanel2);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1172, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuButtonActionPerformed
        // TODO add your handling code here:
        MainMenuPanel.setVisible(true);
        UserAccessPanel.setVisible(false);
        Calendar calReturn = Calendar.getInstance();
        calReturn.add(Calendar.DATE, -14);
        String attentionDate = new SimpleDateFormat("MM/dd/YYYY").format(calReturn.getTime());

        //Establish connection to database
        Connection conn = new DBConnection().connect();

        //SQL to retrieve all current users from DB;
        String sqlUsers = "SELECT userID, CONCAT(firstName,' ', lastName) AS Name FROM authorized_users WHERE department='Sales';";

        String sqlOutstandingTable = "SELECT ID AS 'Quote ID', date AS 'Date Quoted', customerName AS 'Customer Name', comm_description AS 'Commodity Description' FROM allquotes WHERE (booked='0' AND DENY='0')";

        String sqlRequiringAttention = "SELECT ID, date AS 'Date Quoted', customerName AS 'Customer Name', comm_description FROM allquotes WHERE (booked='0' AND DENY='0') AND date <= '" + attentionDate + " %';";
        try {
            PreparedStatement psUsers = conn.prepareStatement(sqlUsers);
            ResultSet rsUsers = psUsers.executeQuery(sqlUsers);

            while (rsUsers.next()) {
                String[] users = {rsUsers.getString("Name")};
                String[] id = {rsUsers.getString("userID")};
                
                for (String user : users) {
                    
                    adminUserComboBox.addItem(Arrays.toString(id) + " - " + user);
                    System.out.println(user);
                }

            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        try {
            PreparedStatement psOutstandingTable = conn.prepareStatement(sqlOutstandingTable);
            ResultSet rsOutstandingTable = psOutstandingTable.executeQuery(sqlOutstandingTable);
            AdministratorMenu.outstandingQuotesTable.setModel(DbUtils.resultSetToTableModel(rsOutstandingTable));
            TableColumnModel tcm = MainMenu.outstandingQuotesTable.getColumnModel();
            tcm.getColumn(0).setHeaderValue("Quote ID");
            tcm.getColumn(1).setHeaderValue("Date Quoted");
            tcm.getColumn(2).setHeaderValue("Customer Name");
            tcm.getColumn(3).setHeaderValue("Commodity Description");
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        try {
            PreparedStatement psRequiringAttention = conn.prepareStatement(sqlRequiringAttention);
            ResultSet rsRequiringAttention = psRequiringAttention.executeQuery(sqlRequiringAttention);
            AdministratorMenu.requireAttentionTable.setModel(DbUtils.resultSetToTableModel(rsRequiringAttention));
            TableColumnModel tcm1 = AdministratorMenu.requireAttentionTable.getColumnModel();
            tcm1.getColumn(0).setHeaderValue("Quote ID");
            tcm1.getColumn(1).setHeaderValue("Date Quoted");
            tcm1.getColumn(2).setHeaderValue("Customer Name");
            tcm1.getColumn(3).setHeaderValue("Commodity Description");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_MainMenuButtonActionPerformed

    private void UserAccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserAccessButtonActionPerformed
        MainMenuPanel.setVisible(false);
        //UserInformationPanel.setVisible(false);
        UserAccessPanel.setVisible(true);

        Connection conn = new DBConnection().connect();

        String sql = "SELECT userID, lastName, firstName, username, password, department, rights, email, title FROM authorized_users";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery(sql);
            CurrentUsersTable.setModel(DbUtils.resultSetToTableModel(rs));
            TableColumnModel tcm = CurrentUsersTable.getColumnModel();
            tcm.getColumn(0).setHeaderValue("ID");
            tcm.getColumn(1).setHeaderValue("Last Name");
            tcm.getColumn(2).setHeaderValue("First Name");
            tcm.getColumn(3).setHeaderValue("Username");
            tcm.getColumn(4).setHeaderValue("Password");
            tcm.getColumn(5).setHeaderValue("Department");
            tcm.getColumn(6).setHeaderValue("Rights");
            tcm.getColumn(7).setHeaderValue("Email");
            tcm.getColumn(8).setHeaderValue("Title");

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_UserAccessButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        addNewUser nu = new addNewUser();
        nu.setVisible(true);
        nu.show();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void adminUserComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminUserComboBoxActionPerformed
        // TODO add your handling code here:
        adminUserComboBox.addActionListener(new CustomActionListener() {});

    }//GEN-LAST:event_adminUserComboBoxActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Establish connection to DB
        Connection conn = new DBConnection().connect();

        // Get the user ID at selected row
        int selectedRow = CurrentUsersTable.getSelectedRow();
        Object selectedRowID = CurrentUsersTable.getValueAt(selectedRow, 0);
        String userID = String.valueOf(selectedRowID);
        System.out.println(selectedRowID);
        String sql = "SELECT * FROM authorized_users WHERE userID='" + userID + " AND department='sales';";
        System.out.println(sql);
        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery(sql);
            if (rs.next()) {
                
                //Create new Current User form
               CurrentUser cu = new CurrentUser();
               
               //Get values from result set
                String ID = rs.getString("userID");
                String firstName = rs.getString("firstName");
                String lastName = rs.getString("lastName");
                String accessLevel = rs.getString("rights");
                String department = rs.getString("department");
                String email = rs.getString("email");
                String username = rs.getString("username");
                String password = rs.getString("password");

                 //Assign values to fields
                 CurrentUser.firstNameTextField.setText(firstName);
                 CurrentUser.lastNameTextField.setText(lastName);
                 CurrentUser.accessLevelComboBox.setSelectedItem(accessLevel);
                 CurrentUser.departmentComboBox.setSelectedItem(department);
                 CurrentUser.emailTextField.setText(email);
                 CurrentUser.usernameTextField.setText(username);
                 CurrentUser.passwordTextField.setText(password);
                 CurrentUser.userIDTextField.setText(ID);
             
                 
                //Open the CurrentUser form
                cu.setVisible(true);
                cu.show();
            }

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void viewOutstandingQuoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOutstandingQuoteButtonActionPerformed
                                                         
        // TODO add your handling code here:
        Connection conn = new DBConnection().connect();

        int selectedRowIndex = outstandingQuotesTable.getSelectedRow();
        Object selectedRowID = outstandingQuotesTable.getValueAt(selectedRowIndex, 0);

        String sql = "SELECT * FROM allquotes WHERE ID =" + selectedRowID + ";";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery(sql);
            if (rs.next()) {
                AdminViewQuote avq = new AdminViewQuote();
                
                String ID = rs.getString("ID");
                String customerName = rs.getString("customerName");
                String customerID = rs.getString("customerID");
                String tradeLane = rs.getString("tradeLane");
                String pol = rs.getString("pol");
                String pod = rs.getString("pod");
                String tshp1 = rs.getString("tshp1");
                String tshp2 = rs.getString("tshp2");
                String commodityClass = rs.getString("comm_class");
                String commodityDescription = rs.getString("comm_description");
                String handlingInstructions = rs.getString("handling_instructions");
                String oft = rs.getString("rate");
                String oftUnit = rs.getString("rate_unit");
                String baf = rs.getString("baf");
                boolean bafIncluded = rs.getBoolean("bafIncluded");
                String eca = rs.getString("eca_baf");
                String ecaUnit = rs.getString("eca_unit");
                boolean ecaIncluded = rs.getBoolean("ecaIncluded");
                String thc = rs.getString("thc");
                String thcUnit = rs.getString("thc_unit");
                boolean thcIncluded = rs.getBoolean("thcIncluded");
                String wfg = rs.getString("wfg");
                String wfgUnit = rs.getString("wfg_unit");
                boolean wfgIncluded = rs.getBoolean("wfgIncluded");
                String documentationFee = rs.getString("doc_fee");
                boolean documentationFeeIncluded = rs.getBoolean("documentationFeeIncluded");
                boolean warRisk = rs.getBoolean("war_risk");
                boolean spotRate = rs.getBoolean("spot_rate");
                boolean booked = rs.getBoolean("booked");
                String comments = rs.getString("comments");
                boolean thcAttached = rs.getBoolean("thcAttached");
                boolean wfgAttached = rs.getBoolean("wfgAttached");
                String authorID = rs.getString("user_ID");
                String updaterID = rs.getString("updateUserID");
                String currentAlphaNumeral = rs.getString("alpha_numeral");
                boolean deny = rs.getBoolean("deny");
                String alphaNumeral = rs.getString("alpha_numeral");
                boolean contractRate = rs.getBoolean("contract_rate");
                String reason_for_decline = rs.getString("reason_for_decline");

                //Get current alph-numeral from DB and display or display N/A if none exists
                if (currentAlphaNumeral == null || currentAlphaNumeral.equals("")) {
                    AdminViewQuote.currentAlphaNumeralLabel.setText("N/A");
                } else if (!currentAlphaNumeral.equals("")) {
                    AdminViewQuote.currentAlphaNumeralLabel.setText(currentAlphaNumeral);
                    //alphaNumeral = currentAlphaNumeral;
                }
                String current = AdminViewQuote.currentAlphaNumeralLabel.getText();

                if (current.equals("") || current.equals("N/A")) {
                    AdminViewQuote.updateAlphaNumeralTextField.setText("A");
                } else if (!current.equals("") || current.equals("N/A")) {
                    int charValue = current.charAt(0);
                    String next = String.valueOf((char) (charValue + 1));
                    AdminViewQuote.updateAlphaNumeralTextField.setText(next);
                }

                if (ecaIncluded == true) {
                    eca = "";
                    ecaUnit = "N/A";
                }
                if (thcIncluded == true) {
                    thc = "";
                    thcUnit = "N/A";
                }
                if (wfgIncluded == true) {
                    wfg = "";
                    wfgUnit = "N/A";
                }
                if (documentationFeeIncluded == true) {
                    documentationFee = "N/A";
                }

                String table = "SELECT commodity, quantity, l, w, h, kgs, length_inches, width_inches, height_inches, lbs, cbm, id FROM packingList WHERE quoteID='" + ID + "';";
                try {
                    PreparedStatement data = conn.prepareStatement(table);
                    ResultSet rs1 = data.executeQuery(table);

                    AdminViewQuote.updateEditPackingListTable.setModel(DbUtils.resultSetToTableModel(rs1));
                    TableColumnModel tcm = AdminViewQuote.updateEditPackingListTable.getColumnModel();
                    tcm.getColumn(0).setHeaderValue("Commodity");
                    tcm.getColumn(0).setMinWidth(150);
                    tcm.getColumn(1).setHeaderValue("Qty");
                    tcm.getColumn(1).setMinWidth(45);
                    tcm.getColumn(2).setHeaderValue("L(cm)");
                    tcm.getColumn(2).setMinWidth(45);
                    tcm.getColumn(3).setHeaderValue("W(cm)");
                    tcm.getColumn(3).setMinWidth(45);
                    tcm.getColumn(4).setHeaderValue("H(cm)");
                    tcm.getColumn(4).setMinWidth(45);
                    tcm.getColumn(5).setHeaderValue("Kgs");
                    tcm.getColumn(5).setMinWidth(45);
                    tcm.getColumn(6).setHeaderValue("L(in)");
                    tcm.getColumn(6).setMinWidth(45);
                    tcm.getColumn(7).setHeaderValue("W(in)");
                    tcm.getColumn(7).setMinWidth(45);
                    tcm.getColumn(8).setHeaderValue("H(in)");
                    tcm.getColumn(8).setMinWidth(45);
                    tcm.getColumn(9).setHeaderValue("CBM");
                    tcm.getColumn(9).setMinWidth(45);
                    tcm.getColumn(10).setHeaderValue("Lbs");
                    tcm.getColumn(10).setMinWidth(45);
                    tcm.getColumn(11).setHeaderValue("ID");
                    tcm.getColumn(11).setMaxWidth(-9999);
                    

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }

                //Returns the value of the author and displays on authorLabel
                String sqlAuthor = "SELECT * FROM authorized_users WHERE userID ='" + authorID + "';";
                PreparedStatement ps2 = conn.prepareStatement(sqlAuthor);
                ResultSet rs2 = ps2.executeQuery();
                while (rs2.next()) {
                    String authorFN = rs2.getString("firstName");
                    String authorLN = rs2.getString("lastName");
                    String author = authorLN + ", " + authorFN;
                    AdminViewQuote.authorLabel.setText(author);
                }

                //Returns the value of the updater and displays on updatedby label
                String updateAuthor = "SELECT * FROM authorized_users WHERE userID='" + updaterID + "';";
                PreparedStatement ps3 = conn.prepareStatement(updateAuthor);
                ResultSet rs3 = ps3.executeQuery();
                while (rs3.next()) {
                    String updaterFN = rs3.getString("firstName");
                    String updaterLN = rs3.getString("lastName");
                    String updater = updaterLN + ", " + updaterFN;
                    AdminViewQuote.lastUpdatedByLabel.setText(updater);
                }
                AdminViewQuote.updateQuoteIDTextArea.setText(ID);
                AdminViewQuote.updateEditQuoteCustomerNameLabel.setText("Customer Name: " + customerName);
                AdminViewQuote.currentAlphaNumeralLabel.setText(alphaNumeral);
                AdminViewQuote.updateTradeLane.setSelectedItem(tradeLane);
                AdminViewQuote.updatePOLTextField.setText(pol);
                AdminViewQuote.updatePODTextField.setText(pod);
                AdminViewQuote.updateTshp1TextField.setText(tshp1);
                AdminViewQuote.updateTshp2TextField.setText(tshp2);
                AdminViewQuote.updateCommodityClassComboBox.setSelectedItem(commodityClass);
                AdminViewQuote.updateCommodityDescriptionTextField.setText(commodityDescription);
                AdminViewQuote.updateHandlingInstructionsComboBox.setSelectedItem(handlingInstructions);
                AdminViewQuote.updateOFTTextField.setText(oft);
                AdminViewQuote.updateOftUnitComboBox.setSelectedItem(oftUnit);
                AdminViewQuote.updateBAFTextField.setText(baf);
                AdminViewQuote.updateBafIncludedCheckBox.setSelected(bafIncluded);
                AdminViewQuote.updateEcaBafTextField.setText(eca);
                AdminViewQuote.updateEcaComboBox.setSelectedItem(ecaUnit);
                AdminViewQuote.updateEcaIncludedCheckBox.setSelected(ecaIncluded);
                AdminViewQuote.updateTHCTextField.setText(thc);
                AdminViewQuote.updateThcComboBox.setSelectedItem(thcUnit);
                AdminViewQuote.updateThcIncludedCheckBox.setSelected(thcIncluded);
                AdminViewQuote.updateThcAttachedCheckBox.setSelected(thcAttached);
                AdminViewQuote.updateWfgTextField.setText(wfg);
                AdminViewQuote.updateWfgComboBox.setSelectedItem(wfgUnit);
                AdminViewQuote.updateWfgIncludedCheckBox.setSelected(wfgIncluded);
                AdminViewQuote.updateWfgAttachedCheckBox.setSelected(wfgAttached);
                AdminViewQuote.updateDocumentationFeeComboBox.setSelectedItem(documentationFee);
                AdminViewQuote.updateDocFeeIncludedCheckBox.setSelected(documentationFeeIncluded);
                AdminViewQuote.updateWarRiskCheckBox.setSelected(warRisk);
                AdminViewQuote.updateSpotRateCheckBox.setSelected(spotRate);
                AdminViewQuote.updateBookedCheckBox.setSelected(booked);
                AdminViewQuote.updateCommentsTextArea.setText(comments);
                AdminViewQuote.updateDeclineCheckBox.setSelected(deny);
                AdminViewQuote.updateDeclineComboBox.setSelectedItem(reason_for_decline);
                AdminViewQuote.updateContractRateCheckBox.setSelected(contractRate);
                
                avq.setVisible(true);
                avq.show();
            }
        } catch (SQLException | HeadlessException e) {

        }
    }//GEN-LAST:event_viewOutstandingQuoteButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
                                                               
        // TODO add your handling code here:
        Connection conn = new DBConnection().connect();

        int selectedRowIndex = requireAttentionTable.getSelectedRow();
        Object selectedRowID = requireAttentionTable.getValueAt(selectedRowIndex, 0);

        String sql = "SELECT * FROM allquotes WHERE ID =" + selectedRowID + ";";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery(sql);
            if (rs.next()) {
                AdminViewQuote avq = new AdminViewQuote();
                
                String ID = rs.getString("ID");
                String customerName = rs.getString("customerName");
                String customerID = rs.getString("customerID");
                String tradeLane = rs.getString("tradeLane");
                String pol = rs.getString("pol");
                String pod = rs.getString("pod");
                String tshp1 = rs.getString("tshp1");
                String tshp2 = rs.getString("tshp2");
                String commodityClass = rs.getString("comm_class");
                String commodityDescription = rs.getString("comm_description");
                String handlingInstructions = rs.getString("handling_instructions");
                String oft = rs.getString("rate");
                String oftUnit = rs.getString("rate_unit");
                String baf = rs.getString("baf");
                boolean bafIncluded = rs.getBoolean("bafIncluded");
                String eca = rs.getString("eca_baf");
                String ecaUnit = rs.getString("eca_unit");
                boolean ecaIncluded = rs.getBoolean("ecaIncluded");
                String thc = rs.getString("thc");
                String thcUnit = rs.getString("thc_unit");
                boolean thcIncluded = rs.getBoolean("thcIncluded");
                String wfg = rs.getString("wfg");
                String wfgUnit = rs.getString("wfg_unit");
                boolean wfgIncluded = rs.getBoolean("wfgIncluded");
                String documentationFee = rs.getString("doc_fee");
                boolean documentationFeeIncluded = rs.getBoolean("documentationFeeIncluded");
                boolean warRisk = rs.getBoolean("war_risk");
                boolean spotRate = rs.getBoolean("spot_rate");
                boolean booked = rs.getBoolean("booked");
                String comments = rs.getString("comments");
                boolean thcAttached = rs.getBoolean("thcAttached");
                boolean wfgAttached = rs.getBoolean("wfgAttached");
                String authorID = rs.getString("user_ID");
                String updaterID = rs.getString("updateUserID");
                String currentAlphaNumeral = rs.getString("alpha_numeral");
                boolean deny = rs.getBoolean("deny");
                String alphaNumeral = rs.getString("alpha_numeral");
                boolean contractRate = rs.getBoolean("contract_rate");
                String reason_for_decline = rs.getString("reason_for_decline");

                //Get current alph-numeral from DB and display or display N/A if none exists
                if (currentAlphaNumeral == null || currentAlphaNumeral.equals("")) {
                    AdminViewQuote.currentAlphaNumeralLabel.setText("N/A");
                } else if (!currentAlphaNumeral.equals("")) {
                    AdminViewQuote.currentAlphaNumeralLabel.setText(currentAlphaNumeral);
                    //alphaNumeral = currentAlphaNumeral;
                }
                String current = AdminViewQuote.currentAlphaNumeralLabel.getText();

                if (current.equals("") || current.equals("N/A")) {
                    AdminViewQuote.updateAlphaNumeralTextField.setText("A");
                } else if (!current.equals("") || current.equals("N/A")) {
                    int charValue = current.charAt(0);
                    String next = String.valueOf((char) (charValue + 1));
                    AdminViewQuote.updateAlphaNumeralTextField.setText(next);
                }

                if (ecaIncluded == true) {
                    eca = "";
                    ecaUnit = "N/A";
                }
                if (thcIncluded == true) {
                    thc = "";
                    thcUnit = "N/A";
                }
                if (wfgIncluded == true) {
                    wfg = "";
                    wfgUnit = "N/A";
                }
                if (documentationFeeIncluded == true) {
                    documentationFee = "N/A";
                }

                String table = "SELECT commodity, quantity, l, w, h, kgs, length_inches, width_inches, height_inches, lbs, cbm FROM packingList WHERE quoteID='" + ID + "';";
                try {
                    PreparedStatement data = conn.prepareStatement(table);
                    ResultSet rs1 = data.executeQuery(table);

                    AdminViewQuote.updateEditPackingListTable.setModel(DbUtils.resultSetToTableModel(rs1));
                    TableColumnModel tcm = AdminViewQuote.updateEditPackingListTable.getColumnModel();
                    tcm.getColumn(0).setHeaderValue("Commodity");
                    tcm.getColumn(0).setMinWidth(150);
                    tcm.getColumn(1).setHeaderValue("Qty");
                    tcm.getColumn(1).setMinWidth(45);
                    tcm.getColumn(2).setHeaderValue("L(cm)");
                    tcm.getColumn(2).setMinWidth(45);
                    tcm.getColumn(3).setHeaderValue("W(cm)");
                    tcm.getColumn(3).setMinWidth(45);
                    tcm.getColumn(4).setHeaderValue("H(cm)");
                    tcm.getColumn(4).setMinWidth(45);
                    tcm.getColumn(5).setHeaderValue("Kgs");
                    tcm.getColumn(5).setMinWidth(45);
                    tcm.getColumn(6).setHeaderValue("L(in)");
                    tcm.getColumn(6).setMinWidth(45);
                    tcm.getColumn(7).setHeaderValue("W(in)");
                    tcm.getColumn(7).setMinWidth(45);
                    tcm.getColumn(8).setHeaderValue("H(in)");
                    tcm.getColumn(8).setMinWidth(45);
                    tcm.getColumn(9).setHeaderValue("CBM");
                    tcm.getColumn(9).setMinWidth(45);
                    tcm.getColumn(10).setHeaderValue("Lbs");
                    tcm.getColumn(10).setMinWidth(45);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }

                //Returns the value of the author and displays on authorLabel
                String sqlAuthor = "SELECT * FROM authorized_users WHERE userID ='" + authorID + "';";
                PreparedStatement ps2 = conn.prepareStatement(sqlAuthor);
                ResultSet rs2 = ps2.executeQuery();
                while (rs2.next()) {
                    String authorFN = rs2.getString("firstName");
                    String authorLN = rs2.getString("lastName");
                    String author = authorLN + ", " + authorFN;
                    AdminViewQuote.authorLabel.setText(author);
                }

                //Returns the value of the updater and displays on updatedby label
                String updateAuthor = "SELECT * FROM authorized_users WHERE userID='" + updaterID + "';";
                PreparedStatement ps3 = conn.prepareStatement(updateAuthor);
                ResultSet rs3 = ps3.executeQuery();
                while (rs3.next()) {
                    String updaterFN = rs3.getString("firstName");
                    String updaterLN = rs3.getString("lastName");
                    String updater = updaterLN + ", " + updaterFN;
                    AdminViewQuote.lastUpdatedByLabel.setText(updater);
                }
                AdminViewQuote.updateQuoteIDTextArea.setText(ID);
                AdminViewQuote.updateEditQuoteCustomerNameLabel.setText("Customer Name: " + customerName);
                AdminViewQuote.currentAlphaNumeralLabel.setText(alphaNumeral);
                AdminViewQuote.updateTradeLane.setSelectedItem(tradeLane);
                AdminViewQuote.updatePOLTextField.setText(pol);
                AdminViewQuote.updatePODTextField.setText(pod);
                AdminViewQuote.updateTshp1TextField.setText(tshp1);
                AdminViewQuote.updateTshp2TextField.setText(tshp2);
                AdminViewQuote.updateCommodityClassComboBox.setSelectedItem(commodityClass);
                AdminViewQuote.updateCommodityDescriptionTextField.setText(commodityDescription);
                AdminViewQuote.updateHandlingInstructionsComboBox.setSelectedItem(handlingInstructions);
                AdminViewQuote.updateOFTTextField.setText(oft);
                AdminViewQuote.updateOftUnitComboBox.setSelectedItem(oftUnit);
                AdminViewQuote.updateBAFTextField.setText(baf);
                AdminViewQuote.updateBafIncludedCheckBox.setSelected(bafIncluded);
                AdminViewQuote.updateEcaBafTextField.setText(eca);
                AdminViewQuote.updateEcaComboBox.setSelectedItem(ecaUnit);
                AdminViewQuote.updateEcaIncludedCheckBox.setSelected(ecaIncluded);
                AdminViewQuote.updateTHCTextField.setText(thc);
                AdminViewQuote.updateThcComboBox.setSelectedItem(thcUnit);
                AdminViewQuote.updateThcIncludedCheckBox.setSelected(thcIncluded);
                AdminViewQuote.updateThcAttachedCheckBox.setSelected(thcAttached);
                AdminViewQuote.updateWfgTextField.setText(wfg);
                AdminViewQuote.updateWfgComboBox.setSelectedItem(wfgUnit);
                AdminViewQuote.updateWfgIncludedCheckBox.setSelected(wfgIncluded);
                AdminViewQuote.updateWfgAttachedCheckBox.setSelected(wfgAttached);
                AdminViewQuote.updateDocumentationFeeComboBox.setSelectedItem(documentationFee);
                AdminViewQuote.updateDocFeeIncludedCheckBox.setSelected(documentationFeeIncluded);
                AdminViewQuote.updateWarRiskCheckBox.setSelected(warRisk);
                AdminViewQuote.updateSpotRateCheckBox.setSelected(spotRate);
                AdminViewQuote.updateBookedCheckBox.setSelected(booked);
                AdminViewQuote.updateCommentsTextArea.setText(comments);
                AdminViewQuote.updateDeclineCheckBox.setSelected(deny);
                AdminViewQuote.updateDeclineComboBox.setSelectedItem(reason_for_decline);
                AdminViewQuote.updateContractRateCheckBox.setSelected(contractRate);
                
                avq.setVisible(true);
                avq.show();
            }
        } catch (SQLException | HeadlessException e) {
           
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    class CustomActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String selected = adminUserComboBox.getSelectedItem().toString();

            //String today = new SimpleDateFormat("MM/dd/yyyy HH:mm").format(Calendar.getInstance().getTime());
            Calendar year = Calendar.getInstance();
            String newYears = new SimpleDateFormat("01/01/" + YEAR).format(year.getTime());
            Calendar thisDay = Calendar.getInstance();
            thisDay.add(Calendar.DATE, +1);
            String today = new SimpleDateFormat("MM/dd/YYYY").format(thisDay.getTime());

            Calendar thisWeek = Calendar.getInstance();
            int dayofweek = thisWeek.get(Calendar.DAY_OF_WEEK);
            thisWeek.add(Calendar.DATE, -dayofweek + 2);
            String firstOfWeek = new SimpleDateFormat("MM/dd/YYYY").format(thisWeek.getTime());
            System.out.println(today);

            //Establish connection to database
            Connection conn = new DBConnection().connect();
            String id = null;
            String[] currentSelection = selected.split("\\s+", -1);
            id = currentSelection[0].replaceAll("\\p{P}", "");

            //Get number of quotes;
            String sqlTotalQuotesToDate = "SELECT COUNT(ID) AS TOTAL FROM allquotes WHERE user_ID='" + id + "';";
            //Get out-standing quotes:
            String sqlOutstanding = "SELECT COUNT(ID) AS OUTSTANDING FROM allquotes WHERE user_ID='" + id + "' AND (booked= '0' AND deny    = '0');";
            //Get bookings to date
            String sqlBookings = "SELECT COUNT(ID) AS BOOKINGS FROM allquotes WHERE (bookedUserID='" + id + "' AND booked='1')";

            String totalQuotesCYTD = "SELECT COUNT(ID) AS TOTAL FROM allquotes WHERE user_Id='" + id + "' AND (date>='" + newYears + "' AND date<='" + today + "');";

            String totalQuotesThisWeek = "SELECT COUNT(ID) AS TOTAL FROM allquotes WHERE user_Id = '" + id + "' AND date>='" + firstOfWeek + "' AND date <='" + today + "';";

            try {
                //Get total quotes to date based on user ID
                PreparedStatement psTotalQuotesToDate = conn.prepareStatement(sqlTotalQuotesToDate);
                ResultSet rsTotalQuotesToDate = psTotalQuotesToDate.executeQuery(sqlTotalQuotesToDate);
                if (rsTotalQuotesToDate.next()) {
                    int totalQuotesToDate = rsTotalQuotesToDate.getInt("TOTAL");
                    totalQuotesLabel.setText(String.valueOf(totalQuotesToDate));
                }

                //Get outstanding quotes based on user ID
                PreparedStatement psOutStanding = conn.prepareStatement(sqlOutstanding);
                ResultSet rsOutStanding = psOutStanding.executeQuery(sqlOutstanding);
                if (rsOutStanding.next()) {
                    int outStanding = rsOutStanding.getInt("OUTSTANDING");
                    outstandingQuotesLabel.setText(String.valueOf(outStanding));
                }

                //Get total quotes YTD based on user ID
                PreparedStatement psTotalQuotesCYTD = conn.prepareStatement(totalQuotesCYTD);
                ResultSet rsTotalQuotesCYTD = psTotalQuotesCYTD.executeQuery(totalQuotesCYTD);
                if (rsTotalQuotesCYTD.next()) {
                    int TotalQuotesCYTD = rsTotalQuotesCYTD.getInt("TOTAL");
                    totalQuotesCYTDLabel.setText(String.valueOf(TotalQuotesCYTD));
                }

                //Get total quotes this week based on user ID
                PreparedStatement psTotalQuotesThisWeek = conn.prepareStatement(totalQuotesThisWeek);
                ResultSet rsTotalQuotesThisWeek = psTotalQuotesThisWeek.executeQuery(totalQuotesThisWeek);
                if (rsTotalQuotesThisWeek.next()) {
                    int TotalQuotesThisWeek = rsTotalQuotesThisWeek.getInt("TOTAL");
                    totalQuotesThisWeekLabel.setText(String.valueOf(TotalQuotesThisWeek));
                }
                //Get total bookings based on user ID
                PreparedStatement psTotalBookings = conn.prepareStatement(sqlBookings);
                ResultSet rsTotalBookings = psTotalBookings.executeQuery(sqlBookings);
                if (rsTotalBookings.next()) {
                    int totalBookings = rsTotalBookings.getInt("BOOKINGS");
                    totalBookingsLabel.setText(String.valueOf(totalBookings));
                }

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdministratorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdministratorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdministratorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdministratorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdministratorMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTable CurrentUsersTable;
    private javax.swing.JButton MainMenuButton;
    private javax.swing.JPanel MainMenuPanel;
    private javax.swing.JButton UserAccessButton;
    private javax.swing.JPanel UserAccessPanel;
    public static javax.swing.JComboBox adminUserComboBox;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel outstandingQuotesLabel;
    public static javax.swing.JTable outstandingQuotesTable;
    public static javax.swing.JTable requireAttentionTable;
    private javax.swing.JLabel totalBookingsLabel;
    private javax.swing.JLabel totalQuotesCYTDLabel;
    private javax.swing.JLabel totalQuotesLabel;
    private javax.swing.JLabel totalQuotesThisWeekLabel;
    private javax.swing.JButton viewOutstandingQuoteButton;
    // End of variables declaration//GEN-END:variables
}
